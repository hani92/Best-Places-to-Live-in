# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# FINAL SCRIPT.py
# Created on: 2017-02-07 16:18:13.00000
#   (generated by ArcGIS\\ModelBuilder)
# Description: Siting Analysis script created by Elise Jackson and Hani Abu-Hmeidan
# ---------------------------------------------------------------------------

# Import Modules
import arcpy
import os
from arcpy.sa import *

# General Parameters
masterfolder = arcpy.GetParameterAsText(0)
geodatabase = arcpy.GetParameterAsText(1)

# Environment Settings
arcpy.CheckOutExtension("spatial")
arcpy.env.workspace = geodatabase
arcpy.env.overwriteOutput = True

"""This function is the main geoprocessing function that includes Clipping, Buffering,
Converting Polygons to Rasters for all different shape files, and adding all these 
rasters together to create a final raster showing the best places to live in each 
of the 10 different cities"""

def geoprocessing(currentcity):

""" Fist step is defining local variables for the geoprocessing function"""

    # Local variables for function:
    freeways_Clip = 'freeways_clip'
    walmarts_Clip = 'walmarts_clip'
    Hospitals_Clip = 'hospitals_clip'
    airports_Clip = 'airports_clip'
    airports_buffer = 'airports_buffer'
    hospitals_buffer = 'hospitals_buffer'
    walmarts_buffer = 'walmarts_buffer'
    freeways_buffer = 'freeways_buffer'
    airports_raster = 'airports_raster'
    hospitals_raster = 'hospitals_raster'
    walmarts_raster = 'walmarts_raster'
    freeways_raster = 'freeways_raster'
    cellsize = .002

    """ Editing and cleaning up of geoprocessing functions """

    """the first variable is the freeway as the best place to live in needs to be far from a
    freeway but not two far. this function clips the nationwide shapefile according to the
    city's citybound shapefile. Same process was done to the three other variables
    (Hospitals, Walmarts, and airports) as we want to be close but not too close to a walmart
    and far but not too far from an airport and a hospital. THE FUNCTION USED TO FOR ClIPPING
    IS arcpy.Clip_analysis (input shape file, feature used to clip input, output shapefile)"""

    # Process: Clip freeways
    arcpy.AddMessage("For " + city + " clip freeways")
    arcpy.Clip_analysis(freeways, citybound, freeways_Clip, "")

    """The clipped freeway variable was then buffered to distances of 0.5 miles and 3 miles. Same
    thing was done to the other variables.
    Airports had buffered distances of 3 and 25 miles
    Hospitals had buffered distances of 0.5 and 25 miles
    Walmarts had buffered distances of 0.5 and 3 miles
    THE FUNCTION USED FOR BUFFERING IS arcpy.MultipleRingBuffer_analysis(input, output, buffered
    distance, unit of distance , and other optional stuff here )"""

    # Process: Buffer Freeway
    arcpy.AddMessage("For " + city + " buffer freeways")
    arcpy.MultipleRingBuffer_analysis(freeways_Clip, freeways_buffer, [0.5, 3], "miles", "", "ALL", "FULL")

    # Process: Clip airports
    arcpy.AddMessage("For " + city + " clip airports")
    arcpy.Clip_analysis(airports, citybound, airports_Clip)

    # Process: Buffer airports
    arcpy.AddMessage("For " + city + " buffer airports")
    arcpy.MultipleRingBuffer_analysis(airports_Clip, airports_buffer, [3.0, 25], "miles", "", "ALL","FULL")

    # Process: Clip Hospitals
    arcpy.AddMessage("For " + city + " clip hospitals")
    arcpy.Clip_analysis(hospitals, citybound, Hospitals_Clip, "")

    # Process: Buffer Hospitals
    arcpy.AddMessage("For " + city + " buffer hospitals")
    arcpy.MultipleRingBuffer_analysis(Hospitals_Clip, hospitals_buffer, [0.5, 25], "miles", "","ALL","FULL")

    # Process: Clip Walmarts
    arcpy.Clip_analysis(walmarts, citybound, walmarts_Clip, "")

    # Process: Buffer Walmarts
    arcpy.MultipleRingBuffer_analysis(walmarts_Clip, walmarts_buffer, [0.5, 3], "miles", "", "ALL","FULL")

    # Convert Polygons to Raster
    """Takes the vector shapefiles created by the clip and multi-ring buffer
    and converts them to a raster.
    Written by Elise"""
    arcpy.AddMessage("Convert " + city + " buffered shapefiles to raster")
    arcpy.PolygonToRaster_conversion(airports_buffer, "distance", airports_raster, "CELL_CENTER", "NONE", cellsize)
    arcpy.PolygonToRaster_conversion(walmarts_buffer, "distance", walmarts_raster, "CELL_CENTER", "NONE", cellsize)
    arcpy.PolygonToRaster_conversion(hospitals_buffer, "distance", hospitals_raster, "CELL_CENTER", "NONE", cellsize)
    arcpy.PolygonToRaster_conversion(freeways_buffer, "distance", freeways_raster, "CELL_CENTER", "NONE", cellsize)

    """The different rasters created were then multiplied together to obtain a final raster that
    combines all the previous conditions together
    THE FUNCTION USED HERE IS THE 	Times function that multiplies 2 rasters together
    The final step in the geoprocessing function is adding the final raster to the map"""

    # Raster Calculator
    arcpy.AddMessage('Combine all rasters')

    raster_calc1 = Times(walmarts_raster, hospitals_raster)
    raster_calc2 = Times(freeways_raster, airports_raster)
    raster_calc3 = Times(raster_calc1, raster_calc2)
    raster_calc3.save("raster_calc")

   """ The final step in the geoprocessing function is adding the final raster to the map

    mxd function defines the map document
    df function defines the data frame
    arcpy.MakeRasterLayer_management() tells ArcMap to expect a raster file not a different type of file
    create the raster layer and identify its tranparency 50 means that the raster is 50% transparent
    We then add this layer to the map and set map extents using df.extent """

    # Add Raster to Map
    """Takes the final raster (raster_calc) and adds it to the map.
    The arcpy.MakeRasterLayer_management function tells ArcMap to expect a raster,
    and not a different type of file
    Written by Elise"""
    arcpy.AddMessage('Add final raster to map')
    mxd = arcpy.mapping.MapDocument('CURRENT')
    df = arcpy.mapping.ListDataFrames(mxd, "Layers")[0]
    arcpy.MakeRasterLayer_management(raster_calc3, 'Site Raster')
    final_raster = arcpy.mapping.Layer('Site Raster')
    final_raster.transparency = 50;
    arcpy.mapping.AddLayer(df, final_raster, 'TOP')

    # Set map extents
    df.extent = final_raster.getExtent()

"""Function to write pdf per each city.  Run as part of the loop  Resets text elements for next loop"""
def writepdf(currentcity):
    # add code to write pdf
    # Create map

    global city

    pdfPath = masterfolder + "\\zAtlas" + "\\City Atlas.pdf"

    try:
        os.remove(pdfPath)
    except:
        arcpy.AddMessage("didn't delete City Atlas")
        pass

    mxd = arcpy.mapping.MapDocument("current")  # Because we are running this in ArcMap Python module, this works before the map creation

    try:
        os.close(pdfPath)
    except:
        pass

    # Checks for previous county file and deletes any existing
    arcpy.AddMessage("delete existing pdf")
    pdfcity = str(masterfolder + "\\zAtlas\\" + city + ".pdf")
    if os.path.exists(pdfcity):
        os.remove(pdfcity)

    # Complete Final Map with specific Data
    arcpy.AddMessage("Title and Page Number")
    for elem in arcpy.mapping.ListLayoutElements(mxd, "TEXT_ELEMENT"):
        if elem.text == "<FNT size='18'>TITLE</FNT>":
            elem.text = "<FNT size='18'>" + "Where to Live in " + str(city) + "</FNT>"
        if elem.text == "<FNT size='12'>PAGE</FNT>":
            elem.text = "<FNT size='12'>Page " + str(i + 1) + " of 10</FNT>"
    arcpy.RefreshActiveView()

    # Export map to pdf
    arcpy.AddMessage("Export map to PDF")
    arcpy.mapping.ExportToPDF(mxd, pdfcity)

    # Resets Text elements for next map
    arcpy.AddMessage("Reset text elements")
    for elem in arcpy.mapping.ListLayoutElements(mxd, "TEXT_ELEMENT"):
        if elem.text == "<FNT size='18'>" + "Where to Live in " + str(city) + "</FNT>":
            elem.text = "<FNT size='18'>TITLE</FNT>"
        if elem.text == "<FNT size='12'>Page " + str(i + 1) + " of 10</FNT>":
            elem.text = "<FNT size='12'>PAGE</FNT>"
    arcpy.RefreshActiveView()

"""Function to create Atlas of pdf files.  Finds the total list of all pdfs in the zAtlas folder,
    then creates an Atlas
    Written by Elise"""
def CreateAtlas(folder):
    # Define workspace, and assign pdf_folder as a function of the master folder
    pdf_folder = folder + "\\zAtlas"
    arcpy.env.workspace = pdf_folder
    pdf_list = arcpy.ListFiles("*.pdf")
    arcpy.AddMessage(pdf_list)
    # Defines path for final Atlas
    pdfPath = folder + "\\City Atlas.pdf"
    if os.path.exists(pdfPath):
        os.remove(pdfPath)
    pdfDoc = arcpy.mapping.PDFDocumentCreate(pdfPath)

    for i in range(0,10):
        file=pdf_list[i]
        pdfDoc.appendPages(pdf_folder + "\\" + file)


# Looping Parameters
"""This part of the code sets up the loop for the code to effectively go through each
    folder (individual city) in the master folder and run the analysis for each city
    Written by Elise"""

citiesfolder = os.listdir(masterfolder)
# set up code to loop through all cities
for i in range(0, 10):
    city = citiesfolder[i]
    print city
    arcpy.AddMessage(city)
    citybound = masterfolder + "\\" + city + "\\cityboundary" "\\citybound.shp"
    freeways = masterfolder + "\\" + city + "\\freeways" + "\\freeways.shp"
    walmarts = masterfolder + "\\" + city + "\\walmarts" + "\\walmarts.shp"
    airports = masterfolder + "\\" + city + "\\airports" + "\\airports.shp"
    hospitals = masterfolder + "\\" + city + "\\hospital" + "\\hospitals.shp"

    #run functions
    geoprocessing(city)
    writepdf(city)

#Runs CreateAtlas at end of script after all pdfs have been created.
CreateAtlas(masterfolder)